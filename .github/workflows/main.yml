name: Mi primer workflow # Un nombre amigable alworkflow

on: [push]  # define el evento que activará tu workflow. En este caso, 
            # el workflow se ejecutará cada vez que alguien haga un push 
            # (envíe cambios) a cualquier rama de tu repositorio

jobs:       # Los jobs son unidades de trabajo independientes que pueden ejecutarse 
            # en paralelo por defecto, o secuencialmente si especificas dependencias.
  primer_job:    # Este es el identificador de tu primer trabajo
    name: Ejecucion del primer paso # Un nombre amigable alworkflow 
    runs-on: ubuntu-latest # especifica el ambiente en el que se ejecutará este job. 
                           # se ejecutará en una máquina virtual con la última versión de Ubuntu 
                           # (un sistema operativo Linux) proporcionada por GitHub

    steps:       # Dentro de cada job, hay una secuencia de pasos que se ejecutan en orden.
      - uses: actions/checkout@v4 # Este es un action predefinido y muy común. Su función es 
                                  # descargar el código de tu repositorio en la máquina virtual 
                                  # donde se está ejecutando el job.
      - run: echo "Hola que tal"  # Este paso simplemente ejecuta un comando de shell
      - run: echo "Fin"
  segundo_job:
    name: Ejecucion del segundo paso
    needs: primer_job    # Indica que este job, depende de que primer_job se complete exitosamente 
                         # antes de poder empezar a ejecutarse
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - run: echo "Continuo luego del primero"
      - run: echo "Termine el Segundo"
  
  tercer_job:
    name: Mostrar Tipos Primitivos
    needs: segundo_job

    runs-on: ubuntu-latest
    
    steps:
      - name: Mostrar sTipos Primitivos
        run: |
          python -c '
          print("Tipos Primitivos")
          print("================")
          print("ciudad: Barquisimeto")
          print("comillas: \"123\"")
          print("edad: 25")
          print("temperatura: 36.6")
          print("masa: 1e6")
          print("activo: True")
          print("verificado: yes")
          print("descripcion: None")
          print("comentario: ~")'
  
  cuarto_job:
    name: Mostrar Listas
    needs: segundo_job

    runs-on: ubuntu-latest
    
    steps:
      - name: Mostrar Listas
        run: |
          echo "Listas"
          echo "======"
          echo "colores"
          echo "  - rojo"
          echo "  - verde"
          echo "  - azul"
          
  quinto_job:
    name: Mostrar Mapas/Diccionarios
    needs: segundo_job

    runs-on: ubuntu-latest
    
    steps:
      - name: Mostrar Mapas/Diccionarios
        run: |
          cat <<EOF
          Mapas/Diccionarios
          ==================
          persona:
             nombre: Carlota
             edad: 5
          EOF
  
  sexto_job:
    name: Mostrar Listas de valores
    needs: segundo_job

    runs-on: ubuntu-latest
    
    steps:
      - name: Mostrar Listas de valores
        run: |
          echo "Listas de valores"
          echo "================="
          echo "usuarios"
          echo "   - nombre: Damiana"
          echo "     edad: 30"
          echo "   - nombre: Carlota"
          echo "     edad: 5"
        
  generate_log:
    name: Creacion de un archivo log
    needs: tercer_job, cuarto_job, quinto_job, sexto_job
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Crear el archivo de log
        run: |
          # Primero obtenemos la fecha
          CURRENT_DATE=$(date)
      
          cat << EOF > output.log
        
          EOF

     # - name: Upload log artifact
     #   uses: actions/upload-artifact@v3
     #   with:
     #     name: execution-logs
     #     path: logs/
     #     if-no-files-found: error
     #     retention-days: 7